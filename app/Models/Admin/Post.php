<?php

namespace App\Models\Admin;

use App\Models\Coment;
use App\Models\Community;
use App\Models\Image;
use App\Models\PostLikes;
use App\Models\User;
use Illuminate\Database\Eloquent\Factories\HasFactory;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Support\Facades\Auth;

class Post extends Model
{
    use HasFactory;
    protected $fillable = [
        'title',
        'small_description',
        'text',
        'author',
        'likes',
        'comments',
        'shares',
        'community',
        'typePost',
        'video',
    ];

    public function communityInfo(){
        return $this->hasOne(Community::class, 'id', 'community');
    }

    public function post_author(){
        return $this->hasOne(User::class, 'id', 'author');
    }

    public function images()
    {
        return $this->hasMany(Image::class, 'post_id')->orderByDesc('created_at');

        //return Image::where('post_id', $this->id)->get();
    }

    public function delete()
    {
        $this->images()->delete();
        $this->coments()->delete();
        $this->likesAndDislikes()->delete();
        return parent::delete(); // TODO: Change the autogenerated stub
    }

    public function coments()
    {
        return $this->hasMany(Coment::class, 'post')->orderByDesc('created_at')->where('level', 1);
    }

    public function getAllCommentsCountAttribute()
    {
        return $this->hasMany(Coment::class, 'post')->orderByDesc('created_at')->count();
    }

    public function getVideoCodeAttribute()
    {
        $url = parse_url($this->video);
        if(count($url)>1) {
            if ($url['host'] == 'youtu.be')
                return str_replace('/', '', $url['path']);
            parse_str($url['query'], $myArray);
            return $myArray['v'];
        }
        return $this->video;
    }

    public function isLiked():bool{
        if(!Auth::check())
            return false;
        $like = PostLikes::where('post', $this->id)->where('user', Auth::id())->where('value', 'like')->first();
        return $like&&$like->id>0;
    }

    public function isDisliked():bool {
        if(!Auth::check())
            return false;
        $like = PostLikes::where('post', $this->id)->where('user', Auth::id())->where('value', 'dislike')->first();
        return $like&&$like->id>0;
    }

    public function likesAndDislikes(){
        return $this->hasMany(PostLikes::class, 'post');
    }

    public function likes() {
        return $this->hasMany(PostLikes::class, 'post')->where('value', 'like');
    }

    public function dislikes() {
        return $this->hasMany(PostLikes::class, 'post')->where('value', 'dislike');
    }

    public function getLikesCntAttribute():int {
        return $this->likes()->count();
    }

    public function getDislikesCntAttribute():int {
        return $this->dislikes()->count();
    }
}

